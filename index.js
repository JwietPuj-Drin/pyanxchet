/**
 * 返回所有符合謂詞的小韻號。
 */
function 所有小韻號中(predicate) {
	// 與前面的小韻音韻地位重複，應排除
	const 要排除的小韻號 = [133, 138, 210, 209, 552, 804, 902, 1002, 1097,
		1191, 1281, 1458, 1464, 1492, 1792, 1831, 1829, 1954, 2076, 2245,
		2548, 2452, 2470, 2527, 2607, 2849, 2855, 3152, 3181, 3321, 3339,
		3331, 3377, 3534, 3722, 3792, 3807, 3842];
	const res = [];
	for (let sr = 1; sr <= 3874; sr++) {
		if (!要排除的小韻號.includes(sr) && predicate(sr)) {
			res.push(sr);
		}
	}
	return res;
}

function 取得漢字小韻號(漢字) {
	const res = Qieyun.query漢字(漢字);
	if (res.length === 0) throw Error(`無${漢字}字讀音`);
	if (res.length === 1) {
		return Qieyun.get音韻地位(res[0]['小韻號']);
	}
	throw Error('暫不能處理多音字');
}

function 開始反切(反切上字音韻地位, 反切下字音韻地位) {
	let result;

	/* 第一步：嘗試通過 (母, 韻, 聲) 確定被切字 */

	const 被切字母 = 反切上字音韻地位.母;
	const 被切字韻 = 反切下字音韻地位.韻賅上去入;
	const 被切字聲 = 反切下字音韻地位.聲;

	result = 所有小韻號中(sr => Qieyun.get音韻地位(sr).屬於(`${被切字母}母 ${被切字韻}韻 ${被切字聲}聲`));
	if (result.length === 0) throw Error('不合法音節');
	else if (result.length === 1) return result[0];

	/* 第二步：嘗試通過 (母, 開合, 韻, 聲) 確定被切字 */

	const 反切上字是開口 = 反切上字音韻地位.屬於('開口') && !反切上字音韻地位.屬於('幫組 或 模韻');
	const 反切下字是開口 = 反切下字音韻地位.屬於('開口') && !反切下字音韻地位.屬於('幫組 或 模韻');

	const 反切上字是合口 = 反切上字音韻地位.屬於('合口') && !反切上字音韻地位.屬於('幫組 或 模韻');
	const 反切下字是合口 = 反切下字音韻地位.屬於('合口') && !反切下字音韻地位.屬於('幫組 或 模韻');

	const 反切上字是模韻 = 反切上字音韻地位.屬於('模韻');
	const 反切下字是幫組 = 反切下字音韻地位.屬於('幫組');

	const 被切字開合 =
		/* 開口 */
		反切上字是開口 && 反切下字是開口 ? '開口 ' :
		反切上字是模韻 && 反切下字是開口 ? '開口 ' :
		/* 合口 */
		反切上字是開口 && 反切下字是合口 ? '合口 ' :
		反切上字是合口 && 反切下字是幫組 ? '合口 ' :
		反切上字是模韻 && 反切下字是合口 ? '合口 ' :
		反切上字是合口 && 反切下字是合口 ? '合口 ' :
		/* 不確定 */
		'';

	result = 所有小韻號中(sr => Qieyun.get音韻地位(sr).屬於(`${被切字母}母 ${被切字開合}${被切字韻}韻 ${被切字聲}聲`));
	if (result.length === 0) throw Error('不合法音節');
	else if (result.length === 1) return result[0];

	/* 第三步：嘗試通過 (母, 開合, 等, 韻, 聲) 確定被切字 */

	const 反切上字是三等 = 反切上字音韻地位.屬於('三等');
	const 反切下字是三等 = 反切下字音韻地位.屬於('三等');

	const 被切字等 =
		/* 非三等 */
		!反切上字是三等 && !反切下字是三等 ? '一二四等 ' :
		/* 三等 */
		!反切上字是三等 && 反切下字是三等 ? '三等 ' :
		反切上字是三等 && 反切下字是三等 ? '三等 ' :
		/* 不確定 */
		'';

	result = 所有小韻號中(sr => Qieyun.get音韻地位(sr).屬於(`${被切字母}母 ${被切字開合}${被切字等}${被切字韻}韻 ${被切字聲}聲`));
	if (result.length === 0) throw Error('不合法音節');
	else if (result.length === 1) return result[0];

	/* 第四步：嘗試通過 (母, 開合, 等, 重紐, 韻, 聲) 確定被切字 */

	const 被切字重紐 =
		/* 下字定重紐 */
		反切下字音韻地位.屬於('重紐B類 或 莊組 或 云母') ? '重紐B類 ' :
		反切下字音韻地位.屬於('重紐A類 或 精章組 或 以母') ? '重紐A類 ' :
		/* 上字定重紐 */
		反切上字音韻地位.屬於('重紐B類') ? '重紐B類 ' :
		反切上字音韻地位.屬於('重紐A類') ? '重紐A類 ' :
		/* 不確定 */
		'';

	result = 所有小韻號中(sr => Qieyun.get音韻地位(sr).屬於(`${被切字母}母 ${被切字開合}${被切字等}${被切字重紐}${被切字韻}韻 ${被切字聲}聲`));
	if (result.length === 0) throw Error('不合法音節');
	else if (result.length === 1) return result[0];

	throw Error('不確定');
}

function handleChange(反切) {
	try {
		if (反切.length === 0) return '';
		if (反切.length !== 2) return '請輸入兩個字';

		const 反切上字音韻地位 = 取得漢字小韻號(反切[0]);
		const 反切下字音韻地位 = 取得漢字小韻號(反切[1]);
		
		const result = 開始反切(反切上字音韻地位, 反切下字音韻地位);
		
		if (result != null) {
			return putonghua(result);
		}
	} catch (e) {
		return e.message;
	}
}
